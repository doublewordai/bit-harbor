name: Build Model Containers

on:
  push:
    branches: [main]
    paths:
      - "models.json"
      - "Dockerfile"
      - ".github/workflows/build-models.yaml"
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild all models (ignore existing images)"
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository }}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      models: ${{ steps.check-models.outputs.models }}
      has-models: ${{ steps.check-models.outputs.has-models }}
    permissions:
      contents: read
      packages: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check which models need building
        id: check-models
        run: |
          echo "🔍 Discovering models that need building..."
          
          # Read all models from models.json
          ALL_MODELS=$(cat models.json | jq -c '.models[]')
          MODELS_TO_BUILD=()
          
          # Check which models need building
          while IFS= read -r model_data; do
            model_name=$(echo "$model_data" | jq -r '.name')
            model_repo=$(echo "$model_data" | jq -r '.repo')
            
            image_tag="${{ env.REGISTRY }}/${{ env.NAMESPACE }}:$model_name"
            
            # Force rebuild or check existing
            if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
              echo "🔄 Force rebuild: Will build $model_name"
              MODELS_TO_BUILD+=("$model_data")
            else
              echo -n "🔍 Checking if $model_name exists... "
              if docker manifest inspect "$image_tag" >/dev/null 2>&1; then
                echo "✓ exists, skipping"
              else
                echo "✗ not found, will build"
                MODELS_TO_BUILD+=("$model_data")
              fi
            fi
          done <<< "$ALL_MODELS"
          
          # Create JSON array for matrix
          if [ ${#MODELS_TO_BUILD[@]} -eq 0 ]; then
            echo "🎉 No models need building"
            echo "models=[]" >> $GITHUB_OUTPUT
            echo "has-models=false" >> $GITHUB_OUTPUT
          else
            echo "🏗️  Found ${#MODELS_TO_BUILD[@]} models to build"
            # Convert bash array to JSON array
            models_json="["
            for i in "${!MODELS_TO_BUILD[@]}"; do
              if [ $i -gt 0 ]; then
                models_json+=","
              fi
              models_json+="${MODELS_TO_BUILD[$i]}"
            done
            models_json+="]"
            
            echo "models=$models_json" >> $GITHUB_OUTPUT
            echo "has-models=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: discover
    if: needs.discover.outputs.has-models == 'true'
    runs-on: depot-ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        model: ${{ fromJson(needs.discover.outputs.models) }}
        
    steps:
      - uses: actions/checkout@v4

      - name: Set up Depot CLI
        uses: depot/setup-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push model with Depot
        uses: depot/build-push-action@v1
        with:
          project: ${{ secrets.DEPOT_PROJECT_ID }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
          tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}:${{ matrix.model.name }}
          build-args: |
            MODEL_REPO=${{ matrix.model.repo }}
            MODEL_NAME=${{ matrix.model.name }}
            HF_TOKEN=${{ secrets.HF_TOKEN }}
          cache-from: type=gha,scope=${{ matrix.model.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.model.name }}
