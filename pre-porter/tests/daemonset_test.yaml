suite: test daemonset creation
templates:
  - daemonset.yaml
tests:
  - it: should create daemonset when image is enabled
    set:
      images:
        - name: "test-image"
          enabled: true
          pullPolicy: "Always"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: DaemonSet
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-porter-test-image
      - equal:
          path: spec.template.spec.containers[0].image
          value: "ghcr.io/doublewordai/bit-harbor:test-image"
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: "Always"
      - equal:
          path: metadata.labels["pre-porter.io/image"]
          value: "test-image"
      - equal:
          path: spec.selector.matchLabels["pre-porter.io/image"]
          value: "test-image"
      - equal:
          path: spec.template.metadata.labels["pre-porter.io/image"]
          value: "test-image"
  - it: should create multiple daemonsets for multiple enabled images
    set:
      images:
        - name: "image-one"
          enabled: true
          pullPolicy: "Always"
        - name: "image-two"
          enabled: true
          pullPolicy: "IfNotPresent"
    asserts:
      - hasDocuments:
          count: 2
  - it: should not create daemonset when image is disabled
    set:
      images:
        - name: "disabled-image"
          enabled: false
          pullPolicy: "Always"
    asserts:
      - hasDocuments:
          count: 0
  - it: should not create any daemonsets when no images are enabled
    set:
      images:
        - name: "image-one"
          enabled: false
        - name: "image-two"
          enabled: false
    asserts:
      - hasDocuments:
          count: 0
  - it: should apply global node selector when no image-specific selector
    set:
      globalNodeSelector:
        gpu: "nvidia"
        zone: "us-west"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.gpu
          value: "nvidia"
      - equal:
          path: spec.template.spec.nodeSelector.zone
          value: "us-west"
  - it: should override global node selector with image-specific selector
    set:
      globalNodeSelector:
        gpu: "nvidia"
        zone: "us-west"
      images:
        - name: "test-image"
          enabled: true
          nodeSelector:
            gpu: "amd"
            memory: "high"
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.gpu
          value: "amd"
      - equal:
          path: spec.template.spec.nodeSelector.memory
          value: "high"
      - isNull:
          path: spec.template.spec.nodeSelector.zone
  - it: should apply global tolerations when no image-specific tolerations
    set:
      globalTolerations:
        - key: "gpu"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.spec.tolerations[0].key
          value: "gpu"
      - equal:
          path: spec.template.spec.tolerations[0].operator
          value: "Equal"
      - equal:
          path: spec.template.spec.tolerations[0].value
          value: "true"
      - equal:
          path: spec.template.spec.tolerations[0].effect
          value: "NoSchedule"
  - it: should override global tolerations with image-specific tolerations
    set:
      globalTolerations:
        - key: "gpu"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      images:
        - name: "test-image"
          enabled: true
          tolerations:
            - key: "memory"
              operator: "Exists"
              effect: "PreferNoSchedule"
    asserts:
      - equal:
          path: spec.template.spec.tolerations[0].key
          value: "memory"
      - equal:
          path: spec.template.spec.tolerations[0].operator
          value: "Exists"
      - equal:
          path: spec.template.spec.tolerations[0].effect
          value: "PreferNoSchedule"
      - isNull:
          path: spec.template.spec.tolerations[0].value
  - it: should apply global resources when no image-specific resources
    set:
      globalResources:
        limits:
          cpu: "200m"
          memory: "256Mi"
        requests:
          cpu: "100m"
          memory: "128Mi"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: "200m"
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: "256Mi"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: "100m"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: "128Mi"
  - it: should override global resources with image-specific resources
    set:
      globalResources:
        limits:
          cpu: "200m"
          memory: "256Mi"
        requests:
          cpu: "100m"
          memory: "128Mi"
      images:
        - name: "test-image"
          enabled: true
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
            requests:
              cpu: "250m"
              memory: "512Mi"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: "500m"
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: "1Gi"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: "250m"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: "512Mi"
  - it: should apply common annotations to daemonset
    set:
      commonAnnotations:
        "example.com/managed-by": "pre-porter"
        "team": "ml-ops"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: metadata.annotations["example.com/managed-by"]
          value: "pre-porter"
      - equal:
          path: metadata.annotations.team
          value: "ml-ops"
  - it: should apply common annotations to pod template
    set:
      commonAnnotations:
        "example.com/managed-by": "pre-porter"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.metadata.annotations["example.com/managed-by"]
          value: "pre-porter"
  - it: should use custom image registry
    set:
      imageRegistry: "custom.registry.com/my-org"
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: "custom.registry.com/my-org:test-image"
  - it: should include restart annotation for pod updates
    set:
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - isNotEmpty:
          path: spec.template.metadata.annotations["kubectl.kubernetes.io/restartedAt"]
  - it: should create model cache container with pause command
    set:
      images:
        - name: "test-image"
          enabled: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].name
          value: "model-cache"
      - equal:
          path: spec.template.spec.containers[0].image
          value: "ghcr.io/doublewordai/bit-harbor:test-image"
      - equal:
          path: spec.template.spec.containers[0].command[0]
          value: "/pause"